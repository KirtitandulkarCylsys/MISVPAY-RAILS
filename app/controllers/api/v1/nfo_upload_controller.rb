class Api::V1::NfoUploadController < ApplicationController
    def create
        trn_type = params[:trn_type]
        inhouse_number = params[:inhouse_number]
        type = params[:type]
        plan = params[:plan]
        plan_description = params[:plan_description]
        from_scheme = params[:from_scheme]
        from_plan = params[:from_plan]
        from_plan_desc = params[:from_plan_desc]
        amc_code = params[:amc_code]
        sch_desc = params[:sch_desc]
        folio_number = params[:folio_number]
        investor_name = params[:investor_name]
        amount = params[:amount]
        amt_incr = params[:amt_incr]
        arn_no = params[:arn_no]
        arn_name = params[:arn_name]
        ufc_code = params[:ufc_code]
        ufc_name = params[:ufc_name]
        region = params[:region]
        zone = params[:zone]
        channel_name = params[:channel_name]
        mod_channel = params[:mod_channel]
        scheme_code = params[:scheme_code]
         branch_code = params[:branch_code]
         pin = params[:pin]
         t30b30flag = params[:t30b30flag]
         platform = params[:platform]
         trxn_date = params[:trxn_date]
         scheme_description = params[:scheme_description]
         map_rmcode = params[:map_rmcode]
         ria_code = params[:ria_code]
         arn_ria = params[:arn_ria]
         platform2 = params[:platform2]
         mobile_number = params[:mobile_number]
         email_id = params[:email_id]
         type2 = params[:type2]
        upload_data = NfoUploadService.get_nfo_upload_details(trn_type,inhouse_number,type,plan,plan_description,from_scheme,from_plan,from_plan_desc,amc_code,sch_desc,folio_number,investor_name,amount,amt_incr,arn_no,arn_name,ufc_code,ufc_name,region,zone,channel_name,mod_channel,scheme_code, branch_code,pin,t30b30flag,platform,trxn_date,scheme_description,map_rmcode,ria_code,arn_ria,platform2,mobile_number,email_id,type2)
        render json: upload_data
    end
end
